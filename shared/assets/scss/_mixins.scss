@mixin transition($what: all, $time: 0.5s, $how: ease) {
  -webkit-transition: $what $time $how;
  -moz-transition: $what $time $how;
  -ms-transition: $what $time $how;
  -o-transition: $what $time $how;
  transition: $what $time $how;
}

@mixin border-radius($radius) {
  border-radius: $radius;
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
}
@mixin box-shadow($left, $top, $radius, $color) {
  box-shadow: $left $top $radius $color;
  -webkit-box-shadow: $left $top $radius $color;
  -moz-box-shadow: $left $top $radius $color;
}

/* clearfix */
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

//Padding mixin
@mixin padding($top, $right, $bottom, $left) {
  padding-top: $top;
  padding-right: $right;
  padding-bottom: $bottom;
  padding-left: $left;
}
//Margin mixin
@mixin margin($top, $right, $bottom, $left) {
  margin-top: $top;
  margin-right: $right;
  margin-bottom: $bottom;
  margin-left: $left;
}

//placeholder mixin
@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

//positioning elements mixin
@mixin center($position) {
  position: absolute;

  @if $position == "vertical" {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  } @else if $position == "horizontal" {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  } @else if $position == "both" {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

//shapes mixin
@mixin shape($shape, $size, $color) {
  @if $shape == square {
    width: $size;
    height: $size;
    background-color: $color;
  }
  @if $shape == circle {
    width: $size;
    height: $size;
    background-color: $color;
    border-radius: 50%;
  }
  @if $shape == triangle {
    width: 0;
    height: 0;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size * 1.5 solid $color;
  }
}

//text shorten mixin
@mixin text-shorten {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

//agradient mixin
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == "vertical" {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == "horizontal" {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

//flex mixin
@mixin flex-column {
  display: flex;
  flex-direction: column;
}
@mixin flex-row {
  display: flex;
  flex-direction: row;
}
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-center-column {
  @include flex-center;
  flex-direction: column;
}

@mixin flex-center-vert {
  display: flex;
  align-items: center;
}
@mixin flex-center-vert-column {
  display: flex;
  justify-content: center;
  flex-direction: column;
}

@mixin flex-center-horiz {
  display: flex;
  justify-content: center;
}
@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
@mixin flex-start {
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
}
@mixin flex-end {
  display: flex;
  align-items: center;
  justify-content: flex-end;
}


//show hide item mixin
@mixin fade($type) {
  @if $type== "hide" {
    visibility: hidden;
    opacity: 0;
    transition: visibility 1s, opacity 1s;
  } @else if $type== "show" {
    visibility: visible;
    opacity: 1;
    transition: visibility 1s, opacity 1s;
  }
}

//opacity mixin
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity = $opacity-ie); //IE8
}

//z-index mixin
@function z($name) {
  @if index($z-indexes, $name) {
    @return (length($z-indexes) - index($z-indexes, $name)) + 1;
  } @else {
    @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
    @return null;
  }
}
$z-indexes: ("outdated-browser", "modal", "site-header", "page-wrapper", "site-footer");

//breakpoint mixin
$breakpoints: (
  "phone": 400px,
  "phone-wide": 480px,
  "phablet": 560px,
  "tablet-small": 767px,
  "tablet": 768px,
  "tablet-wide": 1024px,
  "desktop": 1248px,
  "desktop-wide": 1440px,
);
@mixin mq($width, $type: max) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == min {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

//pseudo elements mixin
@mixin pseudo($display: block, $pos: absolute, $content: "") {
  content: $content;
  display: $display;
  position: $pos;
}

//ratina images mixin
@mixin retina($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    /* Serving 2x image on Retina display */
    background-image: url($image);
    background-size: $width $height;
  }
}

//box shadow mixin
@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow: inset $top $left $blur $color;
    -moz-box-shadow: inset $top $left $blur $color;
    box-shadow: inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}



//white and black opacity mixin
@function black($opacity) {
  @return rgba(0, 0, 0, $opacity);
}
@function white($opacity) {
  @return rgba(255, 255, 255, $opacity);
}

//absilute position mixin
@mixin absolute-position($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}

//transform mixin
@mixin transform($transforms) {
  -webkit-transform: $transforms;
  -moz-transform: $transforms;
  -ms-transform: $transforms;
  transform: $transforms;
}

// Rotate
@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

// Scale
@mixin scale($scale) {
  @include transform(scale($scale));
}

// Translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}

//overlay box mixin
%box-wrap {
  position: relative;
  overflow: hidden;
  .box-overlay {
    background: black(0.6);
    height: 100%;
    width: 100%;
    @include opacity(0);
    @include absolute-position(0, 0, 0, 0);
    

    // @include breakpoint(sm) {
    //   @include opacity(10);
    // }
  }
  .box-wrap-image {
    width: 100%;
  }
  .box-wrap-details {
    position: absolute;
    text-align: center;
    padding-left: 1em;
    padding-right: 1em;
    width: 100%;
    left: 50%;
    @include opacity(0);
    @include transform(translate(-50%, -50%));
    
    // @include breakpoint(sm) {
    //   @include opacity(10);
    // }
    h3 {
      color: #fff;
      margin-bottom: 0.5em;
      text-transform: uppercase;
    }
    p {
      color: #fff;
      @include text-shorten();
    }
  }

  &:hover {
    .box-overlay {
      @include opacity(1);
    }
    .box-wrap-details {
      top: 50%;
      left: 50%;
      @include opacity(1);
    }
    .box-wrap-image {
      width: 100%;
    }
  }
  .fadeIn-bottom {
    top: 80%;
  }
  .fadeIn-top {
    top: 20%;
  }
}

//aspect ratio mixin
@mixin responsive-ratio($x, $y, $pseudo: false) {
  $padding: unquote(($y / $x) * 100 + "%");
  @if $pseudo {
    &:before {
      @include pseudo($pos: relative);
      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}

//button left to right and right to left animation mixin
@mixin background-transition($initial, $hover, $inversed: false) {
  background: linear-gradient(90deg, $hover 0%, $hover 50%, $initial 50%, $initial 100%);
  background-repeat: no-repeat;
  background-size: 200% 100%;
  background-position: right bottom;
  @if $inversed {
    background-position: left bottom;
  }
  &:hover {
    background-position: left bottom;
    @if $inversed {
      background-position: right bottom;
    }
  }
}
// Custom Scrollbar Mixin


@mixin scrollbars($size, $front-color, $back-color) {
  // For Google Chrome
  &::-webkit-scrollbar {
    width: $size;
    height: $size;
  }

  &::-webkit-scrollbar-thumb {
    background: $front-color;
    @include border-radius(30px);
  }

  &::-webkit-scrollbar-track {
    background: $back-color;
    @include border-radius(30px);
  }
}



// Font size mixin
@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}


// Width Mixin
@mixin width($value){
  width: $value;
}

// Height Mixin
@mixin height($value){
  height: $value;
}
@mixin min-width($value){
  min-width:$value;
}
@mixin min-height($value){
  min-height:$value;
}
// display Mixin
@mixin display($display){
  display: $display;
}

// Position Mixin
@mixin position($position){
  position: $position;
}

// Padding Overall Mixin
@mixin same-padding($padding){
  padding: $padding;
}

//Background clr Mixin
@mixin background($name) {
  background-color: $name;
}

//Color clr Mixin
@mixin color($name) {
  color: $name;
}

// Border Mixin
@mixin border($width,$type,$clr){
  border: $width $type $clr;
}
// Border Mixin
@mixin border-top($width,$type,$clr){
  border-top: $width $type $clr;
}
// Border Mixin
@mixin border-bottom($width,$type,$clr){
  border-bottom: $width $type $clr;
}
// Border Mixin
@mixin border-right($width,$type,$clr){
  border-right: $width $type $clr;
}
// Border Mixin
@mixin border-left($width,$type,$clr){
  border-left: $width $type $clr;
}
// Font Weight Mixin
@mixin font-weight($value) {
  font-weight: $value;
}

// Position fixed Mixin
@mixin custom-fixed-position($type,$top,$bottom,$left,$right){
  position: $type;
  top: $top;
  bottom: $bottom;
  left: $left;
  right: $right;
}
// Overflow Mixin
@mixin custom-overflow-y($value){
  overflow-y: $value;
}
@mixin custom-overflow-x($value){
  overflow-x: $value;
}